{"version":3,"sources":["serviceWorker.js","Temp.js","index.js"],"names":["Boolean","window","location","hostname","match","override","css","Temp","className","size","color","href","target","React","Component","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+NCTN,IAAMC,EAAWC,cAAH,KA6BCC,E,uKAnBX,OACE,iCACC,yBAAKC,UAAU,YACZ,6CACA,6BACA,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CACEF,IAAKD,EACLI,KAAM,IACNC,MAAO,aAGX,6BACA,uBAAGF,UAAU,MAAMG,KAAK,oDAAoDC,OAAO,UAAnF,iC,GAhBSC,IAAMC,WCPnBC,EACJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,MAOvCY,IAASC,OAAOL,EAASM,SAASC,eAAe,SFgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.60fefecb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport { css } from \"@emotion/core\";\nimport { Redirect } from 'react-router-dom';\nimport 'react-spinning-wheel/dist/style.css';\nimport ClockLoader from \"react-spinners/ClockLoader\";\n\n// Can be a string as well. Need to ensure each key-value pair ends with ;\n// allows for the clock to be centered\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\n//This class will temporarily display \nclass Temp extends React.Component { \n  render()\n  {  \n    return (   \n      <div> {/* DO NOT REMOVE THIS DIV COMPONENT*/}\n       <div className=\"tempCont\">\n          <h1>Covid Central</h1>\n          <br></br>\n          <div className=\"clockWrapper\">\n            <ClockLoader\n              css={override}\n              size={150}\n              color={\"#FFFFFF\"} \n              />\n          </div>\n          <br></br>\n          <a className=\"see\" href=\"https://github.com/FSUInnovationHub/covid-central\" target=\"_blank\">See what we're up to...</a>\n       </div>\n      </div>\n      )\n  }\n}\nexport default Temp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Redirect, Switch, Route, BrowserRouter as Router, Link } from 'react-router-dom';\nimport Temp from './Temp'\n\n/*using react router we set a constant equal to whatever component\nwe would like to render*/\nconst routing = (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={Temp}/>\n    </Switch>\n  </Router>\n)\n\n/*the code below reads the path and renders component on a conditional basis. \ni.e. /home throws two different components at different places...*/\nReactDOM.render(routing, document.getElementById(\"root\"));\nserviceWorker.unregister();"],"sourceRoot":""}